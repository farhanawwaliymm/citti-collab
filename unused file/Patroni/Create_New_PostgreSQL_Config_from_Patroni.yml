---
- name: Compare and insert parameters without default values and insert below the matched line
  hosts: "{{ host_name }}"
  gather_facts: false
  become: yes
  become_user: root
  become_method: sudo

  vars:
    pgsql_data_dir: "{{ pgsql_data_dir }}"
    postgresql_base_config : "{{ postgresql_base_config }}"
    file1: "{{ file1 }}"  # Path to the first file - Postgresql base on Patroni
    file2: "{{ file2 }}"  # Path to the second file - Temp Postgresql
    parameters_to_search:
      - "archive_command"
      - "archive_mode"
      - "checkpoint_completion_target"
      - "cluster_name"
      - "default_statistics_target"
      - "effective_cache_size"
      - "effective_io_concurrency"
      - "hot_standby"
      - "huge_pages"
      - "listen_addresses"
      - "maintenance_work_mem"
      - "max_connections"
      - "max_locks_per_transaction"
      - "max_parallel_maintenance_workers"
      - "max_parallel_workers"
      - "max_parallel_workers_per_gather"
      - "max_prepared_transactions"
      - "max_replication_slots"
      - "max_wal_senders"
      - "max_wal_size"
      - "max_worker_processes"
      - "min_wal_size"
      - "password_encryption"
      - "pg_stat_statements.track"
      - "port"
      - "random_page_cost"
      - "shared_buffers"
      - "shared_preload_libraries"
      - "track_activity_query_size"
      - "track_commit_timestamp"
      - "wal_buffers"
      - "wal_keep_size"
      - "wal_level"
      - "wal_log_hints"
      - "work_mem"
      - "hba_file"
      - "ident_file"
      - "restore_command"
      - "primary_conninfo"

  tasks:
    - name: Copy PostreSQL Base Config to PostgreSQL Temp File
      command: cp -rp "{{ pgsql_data_dir }}/{{ postgresql_base_config }}" "{{ pgsql_data_dir }}/{{ file2 }}"

    - name: Read postgresql.conf file
      ansible.builtin.command: cat "{{ pgsql_data_dir }}/{{ file1 }}"
      register: postgresql_conf_output

    - name: Read second configuration file (postgresql.base.conf)
      ansible.builtin.command: cat "{{ pgsql_data_dir }}/{{ file2 }}"
      register: postgresql_base_conf_output

    - name: Set facts for lines in postgresql.conf
      set_fact:
        postgresql_conf_lines: "{{ postgresql_conf_output.stdout_lines }}"

    - name: Set facts for lines in postgresql.base.conf
      set_fact:
        postgresql_base_conf_lines: "{{ postgresql_base_conf_output.stdout_lines }}"

    - name: Loop through each parameter and prepare updates
      block:
        - name: Find the line for each parameter in postgresql.conf
          set_fact:
            found_params: "{{ found_params | default({}) | combine({item: { 'param_line': param_line, 'base_param_line': base_param_line }}) }}"
          vars:
            param_line: "{{ postgresql_conf_lines | select('search', '^' + item + '\\s*=') | list | first | default('') }}"
            base_param_line: "{{ postgresql_base_conf_lines | select('search', '^(#\\s*)?' + item + '\\s*=') | list | first | default('') }}"
          loop: "{{ parameters_to_search }}"
          loop_control:
            loop_var: item

        - name: Update param_line for archive_command and restore_command by replacing ''.gz'' with .gz
          set_fact:
            found_params: "{{ found_params | combine({
              'archive_command': {
                'param_line': found_params.archive_command.param_line | regex_replace(\"''\\.gz''\", '.gz'),
                'base_param_line': found_params.archive_command.base_param_line
              },
              'restore_command': {
                'param_line': found_params.restore_command.param_line | regex_replace(\"''\\.gz''\", '.gz'),
                'base_param_line': found_params.restore_command.base_param_line
              }
            }) }}"
          when:
            - "'archive_command' in found_params and found_params.archive_command.param_line | length > 0"
            - "'restore_command' in found_params and found_params.restore_command.param_line | length > 0"

        - name: Prepare final config changes in memory
          set_fact:
            file_modifications: "{{ file_modifications | default([]) + [ { 'param_line': found_params[item].param_line, 'base_param_line': found_params[item].base_param_line } ] }}"
          loop: "{{ parameters_to_search }}"
          loop_control:
            loop_var: item

    - name: Apply modifications to the file2 in bulk
      block:
        - name: Insert param_lines in bulk
          lineinfile:
            path: "{{ pgsql_data_dir }}/{{ file2 }}"
            line: "{{ item.param_line }}"
            insertafter: "^{{ item.base_param_line | regex_escape }}$"
          loop: "{{ file_modifications }}"
          loop_control:
            loop_var: item
          when:
            - item.param_line | length > 0
            - item.base_param_line | length > 0
            - item.base_param_line != ""

        - name: Insert param_lines at the end if base_param_line is not found
          lineinfile:
            path: "{{ pgsql_data_dir }}/{{ file2 }}"
            line: "{{ item.param_line }}"
            insertafter: EOF
          loop: "{{ file_modifications }}"
          loop_control:
            loop_var: item
          when:
            - item.param_line | length > 0
            - item.base_param_line | length == 0