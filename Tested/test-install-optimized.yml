---
- name: Install and Config Patroni
  hosts: all
  gather_facts: true
  become: yes
  become_user: root
  vars_files:
    - ../vars/main.yml

  tasks:
######## OS SETUP ###########
    - name: Disable PostgreSQL module in DNF configuration
      ansible.builtin.command: "dnf -qy module disable postgresql"
      register: disable_postgre_module_dnf

    - name: install PostgreSQL Repository
      ansible.builtin.dnf:
        name: "{{ postgresql_repo }}"
        state: present
        disable_gpg_check: true
      register: install_postgre_repo

    # - name: Enable RHEL8 Extras Repository
    #   command: "dnf config-manager --enable pgdg-rhel8-extras"
    #   register: enable_extra_repo

    - name: Enable RHEL8 Extras Repository
      ansible.builtin.yum_repository:
        name: "{{ pgdg_repo_extra }}"
        state: present
        gpgcheck: false
      register: enabled_pgdg_repo

    - name: install python3-etcd from RPM
      ansible.builtin.dnf:
        name: "{{ python3_etcd_package }}"
        state: present
        disable_gpg_check: true
      register: install_python3_etcd_rpm

    - name: install needed package
      ansible.builtin.dnf:
        name: "{{ package_install }}"
        state: present
        disable_gpg_check: true
      register: installed_needed_package

    - name: Run pip install to install patroni etcd
      ansible.builtin.pip:
        name: "{{ patroni_pip_etcd }}"
        state: present
      register: pip_install_patroni_etcd

    - name: Enable Firewalld service
      ansible.builtin.systemd_service:
        name: "{{ firewalld_service }}"
        enabled: yes
        state: started
      ignore_errors: true
      register: enable_firewalld_service

    - name: open port for Patroni, ETCD, HA-Proxy
      ansible.posix.firewalld:
        port: "{{ item }}"
        state: present
        permanent: true
        immediate: true
      loop:
        - "{{ port_firewalld }}"
      ignore_errors: true
      register: open_port_firewalld

    - debug:
        var: open_port_firewalld

    - name: add rich rule for vrrp
      ansible.posix.firewalld:
        rich_rule: "{{ firewalld_rich_rule }}"
        permanent: true
        state: present
      ignore_errors: true
      register: firewalld_rule_rich

    - name: Restart firewalld service
      ansible.builtin.systemd_service:
        name: "{{ firewalld_service }}"
        enabled: true
        state: restarted
      ignore_errors: true
      register: restart_firewalld

    - name: Restart Chronyd service
      ansible.builtin.systemd_service:
        name: "{{ chrony_service }}"
        enabled: yes
        state: restarted
      ignore_errors: true
      register: restart_chronyd

    - name: Copy default config file
      ansible.builtin.copy:
        src: "{{ etcd_config_file }}"
        dest: "{{ etcd_config_file }}.bak"
        remote_src: true
        backup: true
      register: copy_default_config_etcd

    - name: Delete all existing lines in the config file
      ansible.builtin.lineinfile:
        path: "{{ etcd_config_file }}"
        regexp: '.*'
        state: absent
      register: delete_existingline_etcdconf

    - name: Ensure lines are present in Patroni configuration file
      ansible.builtin.template:
        src: ../templates/etcd.conf.j2
        dest: "{{ etcd_config_file }}"
        backup: true
      register: config_etcdconf

    - name: Restart ETCD service
      ansible.builtin.systemd_service:
        name: "{{ etcd_service }}"
        enabled: yes
        state: started
      ignore_errors: true
      register: restart_service_etcd

######## install patroni ########

######## config stage ########
    - name: Ensure Patroni directory is created with correct ownership and permissions
      ansible.builtin.file:
        path: "{{ patroni_directory }}"
        state: directory
        owner: "root"
        group: "root"
        mode: "0755"
      register: ensure_patroni_directory

    - name: Ensure Patroni data directory is created with correct ownership and permissions
      ansible.builtin.file:
        path: "{{ patroni_data_directory }}"
        state: directory
        owner: "postgres"
        group: "postgres"
        mode: "0700"
      register: ensure_patroni_data_directory

    - name: Ensure PG Archive directory is created with correct ownership and permissions
      ansible.builtin.file:
        path: "{{ patroni_pg_archive_directory }}"
        state: directory
        owner: "postgres"
        group: "postgres"
        mode: "0700"
      register: ensure_pg_archive_directory

    - name: Ensure Patroni configuration file exists
      ansible.builtin.file:
        path: "{{ patroni_config_file_yml }}"
        state: touch
        owner: "root"
        group: "root"
        mode: "0644"
      register: ensure_patroni_config_exist

    - name: Delete all existing lines in the config file
      ansible.builtin.lineinfile:
        path: "{{ patroni_config_file_yml }}"
        regexp: '.*'
        state: absent
      register: delete_existingline_patroniconf

    - name: Ensure lines are present in Patroni configuration file
      ansible.builtin.template:
        src: ../templates/patroni.yml.j2
        dest: "{{ patroni_config_file_yml }}"
        owner: root
        group: root
        mode: "0644"
      register: config_patroniconf

    - name: Create Patroni service file
      ansible.builtin.file:
        path: "{{ patroni_service_file }}"
        owner: "root"
        group: "root"
        mode: "0644"
        state: touch
      register: patroni_servicefile

    - name: Delete all existing lines in the service file
      ansible.builtin.lineinfile:
        path: "{{ patroni_service_file }}"
        regexp: '.*'
        state: absent
      register: patroni_servicefile_clean

    - name: Ensure lines are present in Patroni service file
      ansible.builtin.template:
        src: ../templates/patroni_service.j2
        dest: "{{ patroni_service_file }}"
        owner: "root"
        group: "root"
        mode: "0644"
      register: config_patroni_service

    - name: Enable patroni service
      ansible.builtin.systemd_service:
        name: "{{ patroni_service }}"
        enabled: yes
        state: started
      register: start_patroni_service
...