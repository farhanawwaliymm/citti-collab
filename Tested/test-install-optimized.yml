---
- name: Install and Config Patroni
  hosts: all
  gather_facts: true
  become: yes
  become_user: root

  tasks:
######## OS SETUP ###########

######## install stage ########
    - name: Disable PostgreSQL module in DNF configuration
      ansible.builtin.command: "dnf -qy module disable postgresql"
      register: disable_postgre_module_dnf

    - name: install PostgreSQL Repository
      ansible.builtin.dnf:
        name: "{{ postgresql_repo }}"
        state: present
      register: install_postgre_repo

    - name: Enable RHEL8 Extras Repository
      community.general.dnf_config_manager:
        name: "{{ pgdg_extra_repo }}"
        state: enabled
      register: enabled-pgdg-repo

    - name: install needed package
      ansible.biltin.dnf:
        name: "{{ package_install }}"
        state: present
        disable_gpg_check: true
      register: installed_needed_package

    - name: install python3-etcd from RPM
      ansible.builtin.dnf:
        name: "{{ python3_etcd_package }}"
        state: present
        disable_gpg_check: true
      register: install_python3-etcd_rpm

    - name: Run pip install to install patroni etcd
      ansible.builtin.pip:
        name: "{{ patroni_pip_etcd }}"
        state: present
      register: pip_install_patroni_etcd

######## config stage ########
    - name: Ensure Patroni directory is created with correct ownership and permissions
      ansible.builtin.file:
        path: "{{ patroni_directory }}"
        state: directory
        owner: "root"
        group: "root"
        mode: "0755"
      register: ensure_patroni_directory

    - name: Ensure Patroni data directory is created with correct ownership and permissions
      ansible.builtin.file:
        path: "{{ patroni_data_directory }}"
        state: directory
        owner: "postgres"
        group: "postgres"
        mode: "0700"
      register: ensure_patroni_data_directory

    - name: Ensure PG Archive directory is created with correct ownership and permissions
      ansible.builtin.file:
        path: "{{ patroni_pg_archive_directory }}"
        state: directory
        owner: "postgres"
        group: "postgres"
        mode: "0700"
      register: ensure_pg_archive_directory

    - name: Ensure Patroni configuration file exists
      ansible.builtin.file:
        path: "{{ patroni_config_file_yml }}"
        state: touch
        owner: "root"
        group: "root"
        mode: "0644"
      register: ensure_patroni_config_exist

    - name: Delete all existing lines in the config file
      ansible.builtin.lineinfile:
        path: "{{ patroni_config_file_yml }}"
        regexp: '.*'
        state: absent

    - name: Ensure lines are present in Patroni configuration file
      ansible.builtin.template:
        src: template/patroni.yml.j2
        dest: "{{ patroni_config_file_yml }}"
        owner: root
        group: root

    - name: Create Patroni service file
      ansible.builtin.file:
        path: "{{ patroni_service_file }}"
        owner: "root"
        group: "root"
        mode: "0644"
        state: touch

    - name: Delete all existing lines in the service file
      ansible.builtin.lineinfile:
        path: "{{ patroni_service_file }}"
        regexp: '.*'
        state: absent

    - name: Ensure lines are present in Patroni service file
      ansible.builtin.template:
        src: template/patroni_service.j2
        dest: "{{ patroni_service_file }}"
        owner: "root"
        group: "root"
        mode: "0644"

    - name: Enable patroni service
      systemd:
        name: "{{ patroni_service }}"
        enabled: yes
...