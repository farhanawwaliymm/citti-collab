- name: Disable postgresql module
  when: ansible_distribution == 'RedHat' or ansible_distribution == 'OracleLinux'
  ansible.builtin.command: dnf -y module disable postgresql

- name: Print message
  ansible.builtin.debug:
    msg: Installing postgresql{{ postgresql_version }}-server

- name: Install PostgreSQL server and language packs
  ansible.builtin.dnf:
    name:
      - postgresql{{ postgresql_version }}-server
      - postgresql{{ postgresql_version }}-contrib
    state: present
    disable_gpg_check: true
  register: postgresql_installed

- name: Disable default postgresql service
  ansible.builtin.systemd_service:
    name: postgresql-16
    enabled: false
    masked: true

- name: Create PostgreSQL directories first task
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ postgresql_dir_owner }}"
    group: "{{ postgresql_dir_owner }}"
    mode: "{{ postgresql_dir_permissions }}"
  loop: "{{ postgresql_dirs }}"
  register: dest_dirs_created

- name: Create PostgreSQL database directory
  ansible.builtin.file:
    path: "{{ postgresql_data_dir }}/{{ item.instance_name }}"
    state: directory
    owner: "{{ postgresql_dir_owner }}"
    group: "{{ postgresql_dir_owner }}"
    mode: "{{ postgresql_dir_permissions }}"
  with_items:
    - "{{ postgresql_instances }}"

- name: Create PostgreSQL log directory
  ansible.builtin.file:
    path: "{{ postgresql_log_dir }}"
    state: directory
    owner: "{{ postgresql_dir_owner }}"
    group: "{{ postgresql_dir_owner }}"
    mode: "{{ postgresql_dir_permissions }}"
  with_items:
    - "{{ postgresql_instances }}"

- name: Create PostgreSQL backup directory
  ansible.builtin.file:
    path: "{{ postgresql_backup_dir }}/{{ item.instance_name }}"
    state: directory
    owner: "{{ postgresql_dir_owner }}"
    group: "{{ postgresql_dir_owner }}"
    mode: "{{ postgresql_dir_permissions }}"
  with_items:
    - "{{ postgresql_instances }}"

- name: Template postgresql service
  ansible.builtin.template:
    src: postgresql-{{ postgresql_version }}.service.j2
    dest: /usr/lib/systemd/system/postgresql-{{ postgresql_version }}-{{ item.instance_name }}.service
    owner: root
    group: root
    mode: '0644'
  with_items:
    - "{{ postgresql_instances }}"

- name: Just force systemd to reread configs
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: Initialize the database
  block:
    - name: pgsql initdb
      register: pgsql_initdb
      ansible.builtin.command: /usr/pgsql-{{ postgresql_version }}/bin/postgresql-{{ postgresql_version }}-setup initdb postgresql-{{ postgresql_version }}-"{{ item.instance_name }}" -D "{{ postgresql_data_dir }}/{{ item.instance_name }}"
      changed_when: "'Initializing database ... OK' in pgsql_initdb.stdout"
      with_items:
        - "{{ postgresql_instances }}"
  rescue:
    - name: pgsql initdb rescue
      ansible.builtin.debug:
        msg: "{{ postgresql_data_dir }}/{{ item.instance_name }} already exists"
      with_items:
        - "{{ postgresql_instances }}"

- name: Copy pg_hba.conf template
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql_data_dir }}/{{ item.instance_name }}/pg_hba.conf"
    mode: "0640"
  notify: Restart PostgreSQL Service
  register: pg_hba_changed
  with_items:
    - "{{ postgresql_instances }}"


- name: Deploy postgresql.conf template
  ansible.builtin.template:
    src: postgresql.conf.j2
    dest: "{{ postgresql_data_dir }}/{{ item.instance_name }}/postgresql.conf"
    mode: "0640"
  notify: Restart PostgreSQL Service
  with_items:
    - "{{ postgresql_instances }}"

- name: Log task results
  ansible.builtin.debug:
    msg: |
      PostgreSQL installed: {{ postgresql_installed.changed }}
      Destination directories created: {{ dest_dirs_created.changed }}

- ansible.builtin.include_role:
    name: ccgroups_compute.commvault
