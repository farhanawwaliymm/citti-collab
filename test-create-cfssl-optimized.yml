---
- name: Install and Config CFSSL
  hosts: all
  gather_facts: true
  become: yes
  become_user: root
  vars_files:
    - main.yml

  tasks:
######## OS SETUP ###########
    - name: debug hostname
      ansible.builtin.debug:
        var: ansible_hostname

    - name: Disable PostgreSQL module in DNF configuration
      ansible.builtin.command: "dnf -qy module disable postgresql"
      register: disable_postgre_module_dnf

    - name: install PostgreSQL Repository
      ansible.builtin.dnf:
        name: "{{ postgresql_repo }}"
        state: present
        disable_gpg_check: true
      register: install_postgre_repo

    - name: Enable RHEL8 Extras Repository
      command: "dnf config-manager --enable pgdg-rhel8-extras"
      register: enable_extra_repo

    - name: install needed package
      ansible.builtin.dnf:
        name: "{{ package_install }}"
        state: present
        disable_gpg_check: true
      register: installed_needed_package

    - name: Copy default config file
      ansible.builtin.copy:
        src: "{{ etcd_config_file }}"
        dest: "{{ etcd_config_file }}.bak"
        remote_src: true
        backup: true
      register: copy_default_config_etcd

    - name: Install CFSSL
      command: "curl -L -o /bin/cfssl https://github.com/cloudflare/cfssl/releases/download/v1.6.5/cfssl_1.6.5_linux_amd64"

    - name: Install CFSSLJSON
      command: "curl -L -o /bin/cfssljson https://github.com/cloudflare/cfssl/releases/download/v1.6.5/cfssljson_1.6.5_linux_amd64"

    - name: Install CFSSL-CERTINFO
      command: "curl -L -o /bin/cfssl-certinfo https://github.com/cloudflare/cfssl/releases/download/v1.6.5/cfssl-certinfo_1.6.5_linux_amd64"

    - name: Ensure cfssl binary is created with correct ownership and permissions
      ansible.builtin.file:
        path: /bin/cfssl
        owner: "root"
        group: "root"
        mode: +x
      register: ensure_cfssl_binary

    - name: Ensure cfssljson binary is created with correct ownership and permissions
      ansible.builtin.file:
        path: /bin/cfssljson
        owner: "root"
        group: "root"
        mode: +x
      register: ensure_cfssljson_binary

    - name: Ensure cfssl-certinfo binary is created with correct ownership and permissions
      ansible.builtin.file:
        path: /bin/cfssl-certinfo
        owner: "root"
        group: "root"
        mode: +x
      register: ensure_cfssl_certinfo_binary



######## Create Certificate ########

######## config stage ########
    - name: Ensure cfssl directory is created with correct ownership and permissions
      ansible.builtin.file:
        path: "{{ certificate_directory }}"
        state: directory
        owner: "root"
        group: "root"
        mode: "0700"
      register: ensure_cfssl_directory

#####################################################ca-csr.json##################################################################

    - name: Ensure ca-csr.json configuration file exists
      ansible.builtin.file:
        path: "/root/cfssl/ca-csr.json"
        state: touch
        owner: "root"
        group: "root"
        mode: "0644"
      register: ensure_ca_csr_json_exist

    - name: Delete all existing lines in the ca-csr.json file
      ansible.builtin.lineinfile:
        path: "/root/cfssl/ca-csr.json"
        regexp: '.*'
        state: absent
      register: delete_existingline_cacsrjson

    - name: Ensure lines are present in ca-csr.json file
      ansible.builtin.template:
        src: ca-csr.json.j2
        dest: "/root/cfssl/ca-csr.json"
        owner: root
        group: root
        mode: "0644"
      register: config_cacsrjson
      tags:
        - cfssl_config

#####################################################ca-config.json##################################################################

    - name: Ensure ca-config.json configuration file exists
      ansible.builtin.file:
        path: "/root/cfssl/ca-config.json"
        state: touch
        owner: "root"
        group: "root"
        mode: "0644"
      register: ensure_ca_config_json_exist

    - name: Delete all existing lines in the ca-config.json file
      ansible.builtin.lineinfile:
        path: "/root/cfssl/ca-config.json"
        regexp: '.*'
        state: absent
      register: delete_existingline_caconfigjson

    - name: Ensure lines are present in ca-config.json file
      ansible.builtin.template:
        src: ca-config.json.j2
        dest: "/root/cfssl/ca-config.json"
        owner: root
        group: root
        mode: "0644"
      register: config_caconfigjson
      tags:
        - cfssl_config

#####################################################server.json##################################################################

    - name: Ensure server.json configuration file exists
      ansible.builtin.file:
        path: "/root/cfssl/server.json"
        state: touch
        owner: "root"
        group: "root"
        mode: "0644"
      register: ensure_server_json_exist

    - name: Delete all existing lines in the server.json file
      ansible.builtin.lineinfile:
        path: "/root/cfssl/server.json"
        regexp: '.*'
        state: absent
      register: delete_existingline_serverjson

    - name: Ensure lines are present in server.json file
      ansible.builtin.template:
        src: server.json.j2
        dest: "/root/cfssl/server.json"
        owner: root
        group: root
        mode: "0644"
      register: config_serverjson
      tags:
        - cfssl_config

#####################################################client.json##################################################################

    - name: Ensure client.json configuration file exists
      ansible.builtin.file:
        path: "/root/cfssl/client.json"
        state: touch
        owner: "root"
        group: "root"
        mode: "0644"
      register: ensure_client_json_exist

    - name: Delete all existing lines in the client.json file
      ansible.builtin.lineinfile:
        path: "/root/cfssl/client.json"
        regexp: '.*'
        state: absent
      register: delete_existingline_clientjson

    - name: Ensure lines are present in client.json file
      ansible.builtin.template:
        src: client.json.j2
        dest: "/root/cfssl/client.json"
        owner: root
        group: root
        mode: "0644"
      register: config_clientjson
      tags:
        - cfssl_config

#####################################################pgnode1.json##################################################################

    - name: Ensure pgnode1.json configuration file exists
      ansible.builtin.file:
        path: "/root/cfssl/pgnode1.json"
        state: touch
        owner: "root"
        group: "root"
        mode: "0644"
      register: ensure_pgnode1_json_exist

    - name: Delete all existing lines in the pgnode1.json file
      ansible.builtin.lineinfile:
        path: "/root/cfssl/pgnode1.json"
        regexp: '.*'
        state: absent
      register: delete_existingline_pgnode1json

    - name: Ensure lines are present in pgnode1.json file
      ansible.builtin.template:
        src: pgnode1.json.j2
        dest: "/root/cfssl/pgnode1.json"
        owner: root
        group: root
        mode: "0644"
      register: config_pgnode1json
      tags:
        - cfssl_config

#####################################################pgnode2.json##################################################################

    - name: Ensure pgnode2.json configuration file exists
      ansible.builtin.file:
        path: "/root/cfssl/pgnode2.json"
        state: touch
        owner: "root"
        group: "root"
        mode: "0644"
      register: ensure_pgnode2_json_exist

    - name: Delete all existing lines in the pgnode2.json file
      ansible.builtin.lineinfile:
        path: "/root/cfssl/pgnode2.json"
        regexp: '.*'
        state: absent
      register: delete_existingline_pgnode2json

    - name: Ensure lines are present in pgnode2.json file
      ansible.builtin.template:
        src: pgnode2.json.j2
        dest: "/root/cfssl/pgnode2.json"
        owner: root
        group: root
        mode: "0644"
      register: config_pgnode2json
      tags:
        - cfssl_config

#####################################################pgnode3.json##################################################################

    - name: Ensure pgnode3.json configuration file exists
      ansible.builtin.file:
        path: "/root/cfssl/pgnode3.json"
        state: touch
        owner: "root"
        group: "root"
        mode: "0644"
      register: ensure_pgnode3_json_exist

    - name: Delete all existing lines in the pgnode2.json file
      ansible.builtin.lineinfile:
        path: "/root/cfssl/pgnode3.json"
        regexp: '.*'
        state: absent
      register: delete_existingline_pgnode3json

    - name: Ensure lines are present in pgnode3.json file
      ansible.builtin.template:
        src: pgnode3.json.j2
        dest: "/root/cfssl/pgnode3.json"
        owner: root
        group: root
        mode: "0644"
      register: config_pgnode3json
      tags:
        - cfssl_config

#####################################################generate-root-ca.sh##################################################################

    - name: Ensure generate-root-ca.sh configuration file exists
      ansible.builtin.file:
        path: "/root/cfssl/generate-root-ca.sh"
        state: touch
        owner: "root"
        group: "root"
        mode: "0755"
      register: ensure_generate_root_ca_sh_exist

    - name: Delete all existing lines in the generate-root-ca.sh file
      ansible.builtin.lineinfile:
        path: "/root/cfssl/generate-root-ca.sh"
        regexp: '.*'
        state: absent
      register: delete_existingline_generate_root_ca_sh

    - name: Ensure lines are present in generate-root-ca.sh file
      ansible.builtin.template:
        src: generate-root-ca.sh.j2
        dest: "/root/cfssl/generate-root-ca.sh"
        owner: root
        group: root
        mode: "0755"
      register: config_generate_root_ca_sh
      tags:
        - cfssl_config

############################################generate-cluster-certs.sh##################################################################

    - name: Ensure generate-cluster-certs.sh configuration file exists
      ansible.builtin.file:
        path: "/root/cfssl/generate-cluster-certs.sh"
        state: touch
        owner: "root"
        group: "root"
        mode: "0755"
      register: ensure_generate_cluster_certs_sh_exist

    - name: Delete all existing lines in the generate-cluster-certs.sh file
      ansible.builtin.lineinfile:
        path: "/root/cfssl/generate-cluster-certs.sh"
        regexp: '.*'
        state: absent
      register: delete_existingline_generate_cluster_certs_sh

    - name: Ensure lines are present in generate-cluster-certs.sh file
      ansible.builtin.template:
        src: generate-cluster-certs.sh.j2
        dest: "/root/cfssl/generate-cluster-certs.sh"
        owner: root
        group: root
        mode: "0755"
      register: config_generate_cluster_certs_sh
      tags:
        - cfssl_config

######################################################generate the certificate files###################################################

    - name: Execute generate-root-ca.sh
      shell: /root/cfssl/generate-root-ca.sh
#      command: /root/cfssl/generate-root-ca.sh
      become: yes

    - name: Execute generate-cluster-certs.sh
#      command: /root/cfssl/generate-cluster-certs.sh
      shell: /root/cfssl/generate-root-ca.sh
      become: yes

##################################################copy file#####################################################################
    - name: Copy file to target folder with correct owner and permissions
      ansible.builtin.copy:
#        src: "{{ etcd_config_file }}"
#        dest: "{{ etcd_config_file }}.bak"
        src: /root/cfssl/ca.pem
        dest: /etc/ssl/ca.pem
        remote_src: true
        owner: etcd
        group: etcd
        mode: '0644'

    - name: Copy file to target folder with correct owner and permissions
      ansible.builtin.copy:
#      copy:
        src: /root/cfssl/ca-key.pem
        dest: /etc/ssl/ca-key.pem
        remote_src: true
        owner: etcd
        group: etcd
        mode: '0644'        

    - name: Copy file to target folder with correct owner and permissions
      ansible.builtin.copy:
#      copy:
        src: /root/cfssl/server.pem
        dest: /etc/ssl/server.pem
        remote_src: true
        owner: etcd
        group: etcd
        mode: '0644'

    - name: Copy file to target folder with correct owner and permissions
      ansible.builtin.copy:
#      copy:
        src: /root/cfssl/server-key.pem
        dest: /etc/ssl/server-key.pem
        remote_src: true
        owner: etcd
        group: etcd
        mode: '0644'

    - name: Copy file to target folder with correct owner and permissions
      ansible.builtin.copy:
#      copy:
        src: /root/cfssl/client.pem
        dest: /etc/ssl/client.pem
        remote_src: true
        owner: etcd
        group: etcd
        mode: '0644'

    - name: Copy file to target folder with correct owner and permissions
      ansible.builtin.copy:
#      copy:
        src: /root/cfssl/client-key.pem
        dest: /etc/ssl/client-key.pem
        remote_src: true
        owner: etcd
        group: etcd
        mode: '0644'

    - name: Copy file to target folder with correct owner and permissions
      ansible.builtin.copy:
#      copy:
        src: /root/cfssl/pgnode1.pem
        dest: /etc/ssl/pgnode1.pem
        remote_src: true
        owner: etcd
        group: etcd
        mode: '0644'

    - name: Copy file to target folder with correct owner and permissions
      ansible.builtin.copy:
#      copy:
        src: /root/cfssl/pgnode1-key.pem
        dest: /etc/ssl/pgnode1-key.pem
        remote_src: true
        owner: etcd
        group: etcd
        mode: '0644'

    - name: Copy file to target folder with correct owner and permissions
      ansible.builtin.copy:
#      copy:
        src: /root/cfssl/pgnode2.pem
        dest: /etc/ssl/pgnode2.pem
        remote_src: true
        owner: etcd
        group: etcd
        mode: '0644'

    - name: Copy file to target folder with correct owner and permissions
      ansible.builtin.copy:
#      copy:
        src: /root/cfssl/pgnode2-key.pem
        dest: /etc/ssl/pgnode2-key.pem
        remote_src: true
        owner: etcd
        group: etcd
        mode: '0644'

    - name: Copy file to target folder with correct owner and permissions
      ansible.builtin.copy:
#      copy:
        src: /root/cfssl/pgnode3.pem
        dest: /etc/ssl/pgnode3.pem
        remote_src: true
        owner: etcd
        group: etcd
        mode: '0644'

    - name: Copy file to target folder with correct owner and permissions
      ansible.builtin.copy:
#      copy:
        src: /root/cfssl/pgnode3-key.pem
        dest: /etc/ssl/pgnode3-key.pem
        remote_src: true
        owner: etcd
        group: etcd
        mode: '0644'
#######################################################################################################################

...